@page "/bidpanel"

@using LightningAuction.Delivery


<h1>Bid Panel</h1>

@if (ErrorMsg == "")
{

}
else
{
    <br />
    <span style="color:red;font-weight:bold">@ErrorMsg</span>
    <br />
}
<span>Active auction: @ActiveAuctionId</span>
<br />
<input type="text" @bind="AuctionId" placeholder="AuctionId..." />
<input type="number" @bind="Amount" placeholder="amount..." />
<input type="text" @bind="Text" placeholder="text..." />
<button class="btn btn-primary" @onclick="AddBid">place bid</button>

<input type="text" @bind="AuctionEntryId" placeholder="BidId..." />
<button class="btn btn-primary" @onclick="UpdateBid">lookup bid</button>
<button class="btn btn-primary" @onclick="CancelBid">cancel bid</button>
<br />

@if (auctionEntry == null)
{

    <p><em>request auction entry</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>state</th>
                <th>amount</th>
                <th>message</th>
                <th>invoice</th>

            </tr>
        </thead>
        <tbody>

            <tr>
                <td>@auctionEntry.Id</td>
                <td>@auctionEntry.State</td>
                <td>@auctionEntry.Amount</td>
                <td>@auctionEntry.Message</td>
                <td>@auctionEntry.PaymentRequest</td>

            </tr>
        </tbody>
    </table>
}


@code {
    private string AuctionId;
    private string ActiveAuctionId;
    private long Amount;
    private string Text;
    private string AuctionEntryId;
    private AuctionEntry auctionEntry;
    private string ErrorMsg;

    Channel channel;
    LightningAuctionBidder.LightningAuctionBidderClient client;
    protected override async Task OnInitializedAsync()
    {
        channel = new Channel("127.0.0.1", 5113, ChannelCredentials.Insecure);
        client = new LightningAuctionBidder.LightningAuctionBidderClient(channel);
        await GetActiveAuction();
    }

    private async Task GetActiveAuction()
    {
        ErrorMsg = "";
        try
        {
            var res = await client.GetAuctionAsync(new GetAuctionRequest() { AuctionId = "active" });
            ActiveAuctionId = res.Auction.Id;
            AuctionId = res.Auction.Id;
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }

        StateHasChanged();
    }
    private async void AddBid()
    {
        ErrorMsg = "";
        try
        {
            var res = await client.BidAsync(new BidRequest
            {
                Amount = Amount,
                AuctionId = AuctionId,
                Message = Text
            });

            auctionEntry = res.Entry;
            AuctionEntryId = res.Entry.Id;
            Console.WriteLine(res);
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }

        StateHasChanged();

    }

    private async void UpdateBid()
    {
        ErrorMsg = "";
        try
        {
            var res = await client.GetBidAsync(new GetBidRequest { EntryId = AuctionEntryId });
            auctionEntry = res.Entry;

            Console.WriteLine(res);
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }

        StateHasChanged();

    }

    private async void CancelBid()
    {
        ErrorMsg = "";
        try
        {
            var res = await client.CancelBidAsync(new CancelBidRequest { EntryId = AuctionEntryId });
            UpdateBid();

            Console.WriteLine(res);
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }

        StateHasChanged();
    }

}

