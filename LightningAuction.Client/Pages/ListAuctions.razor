@page "/auctionlist"

@using LightningAuction.Delivery


<h1>Auction List</h1>
@if (ErrorMsg == "")
{

}
else
{
    <br />
    <span style="color:red;font-weight:bold">@ErrorMsg</span>
    <br />
}

@if (auctions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>started at</th>
                <th>duration</th>
                <th>finished at</th>
                <th>winning message</th>
                <th>
                    <button class="btn btn-primary" @onclick="RefreshList"><span class="glyphicon glyphicon-refresh"></span>Refresh</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var auction in auctions)
            {
                Console.WriteLine(auction);
            <tr>
                <td>@auction.Id</td>
                <td>@LightningAuction.Utility.Utility.UnixTimeToDateTime(auction.StartedAt).ToString()</td>
                <td>@auction.Duration seconds</td>
                @if (auction.FinishedAt == 0)
                {

                    <td>active</td>
                }
                else
                {
                    <td>@LightningAuction.Utility.Utility.UnixTimeToDateTime(auction.FinishedAt).ToString()</td>
                }
                <td>@auction.WinningEntry</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    Auction[] auctions;
    
    private string ErrorMsg = "";
    protected override async Task OnInitializedAsync()
    {
        var channel = new Channel("127.0.0.1", 5113, ChannelCredentials.Insecure);
        var client = new LightningAuctionBidder.LightningAuctionBidderClient(channel);


        var res = await client.ListAuctionsAsync(new ListAuctionsRequest { });
        auctions = res.Auctions.ToArray();
    }

    private async void RefreshList()
    {
        ErrorMsg = "";
        try
        {
            var channel = new Channel("127.0.0.1", 5113, ChannelCredentials.Insecure);
            var client = new LightningAuctionBidder.LightningAuctionBidderClient(channel);


            var res = await client.ListAuctionsAsync(new ListAuctionsRequest { });
            auctions = res.Auctions.ToArray();
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }
        
            StateHasChanged();
    }
}
