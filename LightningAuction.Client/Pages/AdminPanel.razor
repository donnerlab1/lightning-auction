@page "/adminpanel"

@using LightningAuction.Delivery


<h1>Admin Panel</h1>

@if (ErrorMsg == "")
{

}
else
{
    <br />
    <span style="color:red;font-weight:bold">@ErrorMsg</span>
    <br />
}

<input type="text" @bind="Signature" placeholder="signature"/>
<br />
<input type="number" @bind="Duration" />
<button class="btn btn-primary" @onclick="NewAuction">start auction</button>
<br />

@if (StartAuction == null)
{

    <p><em>start auction...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>started at</th>
                <th>duration</th>

            </tr>
        </thead>
        <tbody>

            <tr>
                <td>@StartAuction.Id</td>
                <td>@LightningAuction.Utility.Utility.UnixTimeToDateTime(StartAuction.StartedAt).ToString()</td>
                <td>@StartAuction.Duration seconds</td>
            </tr>
        </tbody>
    </table>
}
<br />
<input type="text" @bind="AuctionId" />
<button class="btn btn-primary" @onclick="FinishAuction">end auction</button>
<br />
@if (EndAuction == null)
{

    <p><em>end auction...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>started at</th>
                <th>finished at</th>

            </tr>
        </thead>
        <tbody>

            <tr>
                <td>@EndAuction.Id</td>
                <td>@LightningAuction.Utility.Utility.UnixTimeToDateTime(EndAuction.StartedAt).ToString()</td>
                <td>@LightningAuction.Utility.Utility.UnixTimeToDateTime(EndAuction.FinishedAt).ToString()</td>
            </tr>
        </tbody>
    </table>
}


@code {
    private Auction StartAuction;
    private int Duration = 3600;
    private string AuctionId;
    private Auction EndAuction;
    private string Signature = "";

    private string ErrorMsg = "";

    Channel channel;
    LightningAuctionAdmin.LightningAuctionAdminClient client;
    protected override async Task OnInitializedAsync()
    {
        channel = new Channel("127.0.0.1", 5113, ChannelCredentials.Insecure);
        client = new LightningAuctionAdmin.LightningAuctionAdminClient(channel);

    }
    private async void NewAuction()
    {
        var callOptions = new CallOptions();
        var md = new Metadata();
        md.Add("signature", Signature);
        callOptions = callOptions.WithHeaders(md);
        ErrorMsg = "";
        try
        {
            var res = await client.StartAuctionAsync(new StartAuctionRequest
            {
                Duration = Duration
            }, callOptions);
            StartAuction = res.Auction;
        }
        catch (Exception e)
        {
            ErrorMsg = e.Message;
        }

        StateHasChanged();

    }
    private async void FinishAuction()
    {
        var callOptions = new CallOptions();
        var md = new Metadata();
        md.Add("signature", Signature);
        callOptions = callOptions.WithHeaders(md);

        ErrorMsg = "";
        try
        {
            if (AuctionId == null || AuctionId == "")
                return;
            var res = await client.EndAuctionAsync(new EndAuctionRequest
            {
                AuctionId = AuctionId
            },callOptions);
            EndAuction = res.Auction;

            Console.WriteLine(EndAuction);
        }
        catch (Exception e)
        {
            Console.WriteLine("exception thrown");
            ErrorMsg = e.Message;
        }

        StateHasChanged();


    }

}
